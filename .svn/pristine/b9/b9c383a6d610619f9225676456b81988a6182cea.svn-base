<template>
  <div class="main passmain">
    <a-form
      id="formLogin"
      class="user-layout-login" layout = "horizontal"
      ref="formLogin"
      :form="form"
      @submit="handleSubmit"
    >
         <div class="title">用户修改密码</div>
          <a-alert v-if="isLoginError" type="error" showIcon style="margin-bottom: 24px;" message="账户或密码错误" />
           <a-form-item label = "请输入帐户名">
            <a-input
              size="large"
              type="text"
              placeholder="请输入帐户名"
              v-decorator="[
                'staffId',
                {rules: [{ required: true, message: '请输入帐户名' }], validateTrigger: 'change'}
              ]"
            >
              <a-icon slot="prefix" type="user" :style="{ color: 'rgba(0,0,0,.25)' }"/>
            </a-input>
          </a-form-item>

          <a-form-item label = "请输入旧密码">
            <a-input-password
              ref="passwordinput"
              size="large"
              placeholder="请输入旧密码"
              v-decorator="[
                'password_old',
                {rules: [{ required: true, message: '请输入旧密码' }], validateTrigger: 'blur'}
              ]"
            >
              <a-icon slot="prefix" type="lock" :style="{ color: 'rgba(0,0,0,.25)'}"/>
            </a-input-password>
          </a-form-item>

          <a-form-item label = "请输入新密码(至少8位包含小写、大写字母，数字，特殊符号)">
            <a-input-password
              size="large"
              placeholder="请输入新密码"
              v-decorator="[
                'password_new1',
                {rules: [{ required: true, message: '请输入新密码' }, { validator: valiPassWord} ], validateTrigger: 'blur'}
              ]"
            >
              <a-icon slot="prefix" type="lock" :style="{ color: 'rgba(0,0,0,.25)' }"/>
            </a-input-password>
          </a-form-item>
          <a-form-item label = "请再次输入新密码">
            <a-input-password
              size="large"
              placeholder="请再次输入新密码"
              v-decorator="[
                'password_new2',
                {rules: [{ required: true, message: '请再次输入新密码'}, { validator: valiPassWord2}], validateTrigger: 'blur'}
              ]"
            >
              <a-icon slot="prefix" type="lock" :style="{ color: 'rgba(0,0,0,.25)' }"/>
            </a-input-password>
          </a-form-item>
   

      <a-form-item style="margin-top:24px">
        <a-button
          size="large"
          type="primary"
          htmlType="submit"
          class="login-button"
          :loading="state.loginBtn"
          :disabled="state.loginBtn"
        >确认</a-button>
      </a-form-item>
      <div class="baklog">
        <span @click="$router.push({ path: '/user/login'})"> 返回登录</span>
      </div>
    </a-form>


  </div>
</template>

<script>
import md5 from 'md5'
import { mapActions } from 'vuex'
import { changePwd } from '@/api/login'
import store from 'store'
export default {
  components: {
    
  },
  data () {
    return {
      customActiveKey: 'tab1',
      loginBtn: false,
      // login type: 0 email, 1 username, 2 telephone
      loginType: 0,
      isLoginError: false,
      requiredTwoStepCaptcha: false,
      stepCaptchaVisible: false,
      form: this.$form.createForm(this),
      state: {
        time: 60,
        loginBtn: false,
        loginType: 0,
        smsSendBtn: false
      },
      checkVali: true,

    }
  },
  mounted() {
    var initstaffId  =  (window.sessionStorage.getItem('username') || store.get('staffId') || '');
    this.form.setFieldsValue({staffId: initstaffId})
  },
  created () {
   
  },
  methods: {
    ...mapActions(['Login', 'Logout']),
    // handler
    valiPassWord (rule, value, callback) {
      const { state } = this
      var regex = /^.*(?=.{8,16})(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*?\(\)]).*$/;
      if (regex.test(value)) {
        callback()
      } else {
        state.checkVali = false;
        callback('请输入包含小写、大写字母，数字，特殊符号的至少8位密码')
      }
      
    },
    valiPassWord2  (rule, value, callback) {
      const { state } = this
      var passval1 = this.form.getFieldValue('password_new1');
      if (passval1 == value) {
        callback()
      } else {
        state.checkVali = false;
        callback('俩次输入密码不一致')
      }
      
    },

    handleSubmit (e) {
      e.preventDefault()
      const {
        form: { validateFields },
        state
      } = this

      state.loginBtn = true

      const validateFieldsKey = ['staffId', 'password_old', 'password_new1', 'password_new2']
      validateFields(validateFieldsKey, { force: true }, (err, values) => {
        
        if (!err) {
          var params  =  {
            staffId: values.staffId,
            oldPwd: md5(values.password_old),
            newPwd: md5(values.password_new1) 
          }
          changePwd(params).then(data => {
             state.loginBtn = false;
            if(data.rspCode == "0000") {
              this.$message.success(data.rspMsg || '修改密码成功！');
              this.Logout().then(() => {
                  store.remove('token')
                  window.setTimeout(() => {
                    this.$router.push({ path: '/user/login'})
                  })
              })
            } else {
              this.$refs.passwordinput.focus()
              this.$message.error(data.rspMsg || '修改密码失败');
            }
          })
          
        } else {
          setTimeout(() => {
            state.loginBtn = false
          }, 600)
        }
      })
    }
  }
}
</script>

<style lang="less" scoped>
.main{
  position: absolute;
  height: 760px;
  background: url("~@/assets/images/bigScreen/login.png") no-repeat;
  background-size: 100% 100%;
  top: 50%;
  margin-top: -300px !important;
  left: 50%;
  margin-left: -350px !important;
  width: 100% !important;

}

.user-layout-login {
    width: 400px;
    margin: 0 auto;
    margin-top: 40px;
  .title{
    font-size: 21px;
    font-family: Microsoft YaHei;
    font-weight: bold;
    color: #05FFFF;
    line-height: 30px;
    text-align: center;
    margin-bottom: 24px;
  }
  label {
    font-size: 14px;
  }

  .getCaptcha {
    display: block;
    width: 100%;
    height: 40px;
  }

  .forge-password {
    font-size: 14px;
  }

  button.login-button {
    padding: 0 15px;
    font-size: 16px;
    height: 40px;
    width: 100%;
    color: #0A3D75;
    background: #1ADCFF;
    border: none;
  }

  .user-login-other {
    text-align: left;
    margin-top: 24px;
    line-height: 22px;

    .item-icon {
      font-size: 24px;
      color: rgba(0, 0, 0, 0.2);
      margin-left: 16px;
      vertical-align: middle;
      cursor: pointer;
      transition: color 0.3s;

      &:hover {
        color: #1890ff;
      }
    }

    .register {
      float: right;
    }
  }
}
/deep/ .ant-form-item-label > label{
  color: #ddd;
}

.baklog {
  color: #fff;
  cursor: pointer;
  font-size: 14px;
  margin-top: -10px;
}
</style>
