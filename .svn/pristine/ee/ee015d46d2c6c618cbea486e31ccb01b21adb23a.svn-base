<!-- bar -->
<template>
  <div :id="domid" class="echartbox"></div>
</template>

<script>
import echarts from 'echarts'
const CubeLeft = echarts.graphic.extendShape({
  shape: {
    x: 0,
    y: 0
  },
  buildPath: function(ctx, shape) {
    const xAxisPoint = shape.xAxisPoint
    const c0 = [shape.x, shape.y]
    const c1 = [shape.x - 6, shape.y - 6]
    const c2 = [xAxisPoint[0] - 6, xAxisPoint[1] - 6]
    const c3 = [xAxisPoint[0], xAxisPoint[1]]
    ctx
      .moveTo(c0[0], c0[1])
      .lineTo(c1[0], c1[1])
      .lineTo(c2[0], c2[1])
      .lineTo(c3[0], c3[1])
      .closePath()
  }
})
const CubeRight = echarts.graphic.extendShape({
  shape: {
    x: 0,
    y: 0
  },
  buildPath: function(ctx, shape) {
    const xAxisPoint = shape.xAxisPoint
    const c1 = [shape.x, shape.y]
    const c2 = [xAxisPoint[0], xAxisPoint[1]]
    const c3 = [xAxisPoint[0] + 12, xAxisPoint[1] - 6]
    const c4 = [shape.x + 12, shape.y - 6]
    ctx
      .moveTo(c1[0], c1[1])
      .lineTo(c2[0], c2[1])
      .lineTo(c3[0], c3[1])
      .lineTo(c4[0], c4[1])
      .closePath()
  }
})
const CubeTop = echarts.graphic.extendShape({
  shape: {
    x: 0,
    y: 0
  },
  buildPath: function(ctx, shape) {
    const c1 = [shape.x, shape.y]
    const c2 = [shape.x + 12, shape.y - 6]
    const c3 = [shape.x + 6, shape.y - 12]
    const c4 = [shape.x - 6, shape.y - 6]
    ctx
      .moveTo(c1[0], c1[1])
      .lineTo(c2[0], c2[1])
      .lineTo(c3[0], c3[1])
      .lineTo(c4[0], c4[1])
      .closePath()
  }
})
echarts.graphic.registerShape('CubeLeft', CubeLeft)
echarts.graphic.registerShape('CubeRight', CubeRight)
echarts.graphic.registerShape('CubeTop', CubeTop)

export default {
  props: {
    domid: {
      type: String,
      default: 'echartbar'
    },
    pdata: {
      type: Object,
      default: function (params) {
        return {}
      }
    }
  },
  data() {
    return {
      myChart: null,
      option: {
        backgroundColor: '#010d3a',
        grid: {
          top: '40',
          left: '10',
          right: '10',
          bottom: '10',
          containLabel: true
        },
        tooltip: {
            trigger: 'item' 
        },
       
        xAxis: {
          type: 'category',
          data: [],
          axisLine: {
            show: true,
            lineStyle: {
              color: '#5099f7'
            }
          },
          axisTick: {
            show: false,
            length: 4,
            lineStyle: {
              color: '#ddd'
            }
          },
          axisLabel: {
            fontSize: 12,
            rotate: 40
          }
        },
        yAxis: {
          type: 'value',
          axisLine: {
            show: false,
            lineStyle: {
              color: '#ddd'
            }
          },
          splitLine: {
            show: true,
            lineStyle: {
              color: '#1a4a7c'
            }
          },
          axisTick: {
            show: false
          },
          axisLabel: {
            show: false,
            fontSize: 10
          },
          boundaryGap: ['0%', '20%']
        },
        series: [
          {
            type: 'custom',
            renderItem: (params, api) => {
              const location = api.coord([api.value(0), api.value(1)])
              return {
                type: 'group',
                children: [
                  {
                    type: 'CubeLeft',
                    shape: {
                      api,
                      xValue: api.value(0),
                      yValue: api.value(1),
                      x: location[0],
                      y: location[1],
                      xAxisPoint: api.coord([api.value(0), 0])
                    },
                    style: {
                      fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                        {
                          offset: 0,
                          color: '#3B80E2'
                        },
                        {
                          offset: 1,
                          color: '#091c4a'
                        }
                      ])
                    }
                  },
                  {
                    type: 'CubeRight',
                    shape: {
                      api,
                      xValue: api.value(0),
                      yValue: api.value(1),
                      x: location[0],
                      y: location[1],
                      xAxisPoint: api.coord([api.value(0), 0])
                    },
                    style: {
                      fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                        {
                          offset: 0,
                          color: '#3B80E2'
                        },
                        {
                          offset: 1,
                          color: '#1e4d78'
                        }
                      ])
                    }
                  },
                  {
                    type: 'CubeTop',
                    shape: {
                      api,
                      xValue: api.value(0),
                      yValue: api.value(1),
                      x: location[0],
                      y: location[1],
                      xAxisPoint: api.coord([api.value(0), 0])
                    },
                    style: {
                      fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                        {
                          offset: 0,
                          color: '#3B80E2'
                        },
                        {
                          offset: 1,
                          color: '#49BEE5'
                        }
                      ])
                    }
                  }
                ]
              }
            },
            data: []
          },
          {
        type: 'bar',
        label: {
            normal: {
                show: true,
                position: 'top',
                
                fontSize: 13,
                color: '#ddd',
                offset: [0, -10]
            }
        },
        itemStyle: {
            color: 'transparent'
        },
          data: []
        }
        ]
      }
    }
  },
  components: {},
  mounted() {
    var self = this

    this.$nextTick(() => {
      if (self.pdata.xdata.length > 12) {
         self.option.dataZoom = [{
            type: 'inside',
            start: 0,
            end: 80
        }, {
            start: 0,
            end: 80
        }]
      } else {
        self.option.dataZoom = []
      }
      self.option.xAxis.data = self.pdata.xdata || []
      self.option.series[0].data = self.pdata.vdata || []
      self.option.series[1].data = self.pdata.vdata || []
      self.myChart = echarts.init(document.getElementById(self.domid))
      self.myChart.setOption(self.option, true)
      self.myChart.resize()
    })
  },
  watch: {
    pdata(val) {
      this.initEcharts()
    }
  },
  computed: {},
  methods: {
    initEcharts() {
      var self = this;
      if (self.pdata.xdata.length > 12) {
         self.option.dataZoom = [{
            type: 'inside',
            start: 0,
            end: 80
        }, {
            start: 0,
            end: 80
        }]
      } else{
        self.option.dataZoom = []
      }
      self.option.xAxis.data = self.pdata.xdata || []
      self.option.series[0].data = self.pdata.vdata || []
      self.option.series[1].data = self.pdata.vdata || []
      self.myChart.setOption(this.option, true)
     
      self.$nextTick(() => {
         self.myChart.resize()
      })
    }
  }
}
</script>

<style lang="css" scoped>
.echartbox {
  width: 100%;
  height: 100%;
}
</style>
