<!-- 日志分析 -->
<template>
    <div class="contentbox">
        <Header title="山东联通网络洞察-日志分析" ></Header>
        <div class="searchbox">
            <div class="formitem">
                <label>起始日期：</label>
                 <el-date-picker
                    v-model="startDate"
                    type="date" size="small"
                    placeholder="选择日期" @change = "startDateChange">
                </el-date-picker>
            </div>

            <div class="formitem">
                <label>终止日期：</label>
                 <el-date-picker
                    v-model="endDate"
                    type="date" size="small"
                    placeholder="选择日期"   @change = "endDateChange" >
                </el-date-picker>
            </div>

            <div class="formitem" >
                <el-radio-group v-model="groupDate" size="small" @change = "groupChange">
                    <el-radio-button label="currmonth" name = "currmonth">本月</el-radio-button>
                    <el-radio-button label="day" name = "day">近7天</el-radio-button>
                    <el-radio-button label="month"  name = "month">近一月</el-radio-button>
                    <el-radio-button label="threeMonth"  name = " threeMonth">近三月</el-radio-button>
                </el-radio-group>
            </div>

              <div class="formitem" >
                 <el-button type="primary" size="small" round @click="querySubmit">统计</el-button>
             </div>
             <div class="formitem zhdcexbox" style="margin-left: 20px; background: #07133f;  padding: 4px 12px; border-radius: 8px;" v-show="timeFlag">
                <span style="font-weight: 600; font-size: 16px; margin-right: 15px;">账号统计导出:</span>
                <el-button type="primary" round  size="small">
                  <a :href = "exportExcel_sv('DL')" >登录统计</a>
                </el-button>
                <el-button type="primary" round  size="small" >
                  <a :href = "exportExcel_sv('DP')" >大屏统计</a>
                </el-button>
                <el-button type="primary" round  size="small" > <a :href = "exportExcel_sv('YY')" >AI应用统计</a></el-button>

                <span style="line-height: 30px;  display: inline-block; padding-left: 15px; font-weight: 600; border-left: 1px solid rgb(80 111 199); font-size: 16px; margin-right: 15px; margin-left: 15px">地市统计导出:</span>
                <el-button type="primary" round  size="small">
                  <a :href = "exportExcel_sv('ALL')" >地市综合统计</a>
                </el-button>
             </div>
            
            <!-- <div class="pull-right formitem cityinfo" >山东省</div> -->


        </div>
        <div class="loginfobox">
            <div class="loginfoboxwarp">
                <div class="flex1 logrow">
                    <div class="flex1 loginfitem">
                         <div class="logitem-title">
                            <span>大屏统计（按地市）</span>
                            <span class="exportbtn pull-right" v-if = "bar_dpdstable.length > 0">
                                <el-button type="primary" size="mini" icon="el-icon-tickets" round @click="exportExcel('dp_1')">导出</el-button>
                            </span>
                         </div>
                         <div class="totalbox">合计：<span>{{bar_dptotal}}</span></div>
                         <div class="chartbox flex1" id="bar3d1"></div>
                    </div>
                    <div class="flex1 loginfitem">
                        <div class="logitem-title">
                            <span>AI-应用超市统计（按地市）</span>
                            <span class="exportbtn pull-right" v-if = "bar_aidstable.length > 0">
                                <el-button type="primary" size="mini" icon="el-icon-tickets" round @click="exportExcel('ai_1')">导出</el-button>
                            </span>
                         </div>
                          <div class="totalbox">合计：<span>{{bar_aitotal}}</span></div>
                           <div class="chartbox flex1" id="bar3d2"></div>
                    </div>
                    <div class="flex1 loginfitem">
                         <div class="logitem-title">
                            <span>登录统计（按地市）</span>
                            <span class="exportbtn pull-right" v-if = "bar_dldstable.length > 0">
                                <el-button type="primary" size="mini" icon="el-icon-tickets" round @click="exportExcel('dl_1')">导出</el-button>
                            </span>
                         </div>
                          <div class="totalbox">合计：<span>{{bar_dltotal}}</span></div>
                         <div class="chartbox flex1" id="bar3d3"></div>
                    </div>
                </div>
               
               <div class="flex1 logrow">
                    <div class="flex1 loginfitem">
                        <div class="logitem-title">
                            <span>大屏统计（按分类）</span>
                             <span class="exportbtn pull-right" v-if = "pie_dpfltable.length > 0">
                                <el-button type="primary" size="mini" icon="el-icon-tickets" round @click="exportExcel('dp_2')">导出</el-button>
                            </span>
                         </div>
                         <div class="chartbox flex1" id="dp_chartpie"></div>
                    </div>
                    <div class="flex1 loginfitem">
                         <div class="logitem-title">
                            <span>AI-应用超市统计（按分类）</span>
                           <span class="exportbtn pull-right" v-if = "pie_aifltable.length > 0">
                                <el-button type="primary" size="mini" icon="el-icon-tickets" round @click="exportExcel('ai_2')">导出</el-button>
                            </span>
                         </div>
                          <div class="chartbox flex1" id="ai_chartpie"></div>
                    </div>
                    <div class="flex1 loginfitem">
                        <div class="logitem-title">
                            <span>近一年累计统计</span>
                            <!-- <span class="zdmore pull-right ">
                               <span class="el-icon-more"></span>
                            </span> -->
                         </div>
                           <div class="chartbox flex1" id="login_line"></div>
                         
                    </div>
                </div>
                <div class="logrow logrow_b" style="margin-bottom: 10px;">
                    <div class="flex1 loginfitem">
                        
                        <div class="logitem-title">
                            <span>大屏统计TOP</span>
                            <span class="exportbtn pull-right" v-if = "pm_dptable.length > 0">
                                <el-button type="primary" size="mini" icon="el-icon-tickets" round @click="exportExcel('dp_3')">导出</el-button>
                            </span>
                         </div>
                         <div class="chartbox flex1" id="dp_pmchart"></div>
                    </div>
                    <div class="flex1 loginfitem">
                        <div class="logitem-title">
                            <span>AI-应用超市统计TOP</span>
                            <span class="exportbtn pull-right" v-if = "pm_aitable.length > 0">
                                <el-button type="primary" size="mini" icon="el-icon-tickets" round @click="exportExcel('ai_3')">导出</el-button>
                            </span>
                         </div>
                           <div class="chartbox flex1" id="ai_pmchart"></div>
                         
                    </div>
                    <div class="flex1 loginfitem flex ">
                         <div class="logitem-title">
                            <span>累计统计</span>
                            <!-- <span class="zdmore pull-right ">
                               <span class="el-icon-more"></span>
                            </span> -->
                         </div>
                         <div class="flex flex1">
                            <div class="colitem flex1">
                                <div class="numif">{{login_total | formatVal}}</div>
                                <div class="imgif"><img src="@/assets/images/登录像.png" alt="" srcset=""></div>
                                <div class="fontif">登录总次数</div>
                            </div>
                            <div class="colitem flex1">
                               <div class="numif">{{dpclick_total | formatVal}}</div>
                                <div class="imgif"><img src="@/assets/images/点击量.png" alt="" srcset=""></div>
                                <div class="fontif">大屏总点击次数</div>
                            </div>
                             <div class="colitem flex1">
                               <div class="numif">{{ai_total | formatVal}}</div>
                                <div class="imgif"><img src="@/assets/images/人工智能.png" alt="" srcset=""></div>
                                <div class="fontif">AI应用总点击次数</div>
                            </div>
                         </div>
                       
                    </div>
                </div>
            </div>
            
        </div>
    </div>

</template>

<script>
import Header from '@/components/resource_visual/header2'
import echartInit from './logechart'
import serviceApi from '@/api/logservice'
import _ from 'lodash'
import store from 'store';
var Qs = require('@/utils/qs.js')
export default {
  data () {
    return {
        cityCode: '',
        dateshow: false,
        startDate: '',
        endDate: '',
        groupDate: '',
        bar_dptotal: '',
        bar_dpdstable: [],
        pie_dpfltable: [],
        bar_aitotal: '',
        bar_aidstable: [],
        pie_aifltable: [],
        bar_dltotal: '',
        bar_dldstable: [],
        login_total: '',
        dpclick_total: '',
        ai_total: '',
        pm_aitable: [],
        pm_dptable: [],
    };
  },

  components: {
      Header
  },
  watch: {
      groupDate (val) {
        if (val) {
            if (val == 'currmonth') {
            this.initDate()
            } else if (val == 'day') {
                this.startDate = this.getXday(-6);
                this.endDate = this.getXday(0);
            } else if (val == 'month') {
                this.startDate = this.getXday(-30);
                this.endDate = this.getXday(0);
            } else if (val == 'threeMonth') {
                this.startDate = this.getXday(-90);
                this.endDate = this.getXday(0);
            }
        }
      }
  },
  computed: {
     timeFlag () {
       return this.startDate &&  this.endDate;
     }
  },
  created () {
    var userInfo = store.get('userInfo') || {};
     var mapLevel = userInfo.levelAreaLevel
      if (mapLevel == '1') {
        // 省级用户
        this.cityCode = '0000';
      } else if (mapLevel >= '2') {
        this.cityCode = userInfo.levelAreaCode
      }

    this.initDate()
  },
  mounted () {
      this.initQueryData() // 大屏按地市统计
      this.initQueryNoDate()

    //   this.initEchart()
    
    //  LAY_EXCEL.exportExcel([[1, 2, 3]], '表格导出.xlsx', 'xlsx')
  },

  methods: {
      exportExcel_sv (type) {
         var excelUrl = ''
         var qparams = {
            "startTime": this.startDate,
            "endTime": this.endDate,
            levelAreaCode: this.cityCode,
            "execlType": type,
          };
          excelUrl = '/view/log/logExcel?' + Qs.stringify(qparams);
          return excelUrl;
      },
      exportExcel(type) {
        if (type ==  'dp_1') {
          // 大屏统计（按地市）
          var tabledata = this.bar_dpdstable;
          let header = {index: '序号', name: '地市', val: '次数'};
          let exportTable = _.cloneDeep(tabledata);
          exportTable.unshift(header);
          LAY_EXCEL.exportExcel(exportTable, '大屏统计(按地市).xlsx', 'xlsx')
        } else if (type == 'ai_1') {
        
           var tabledata = this.bar_aidstable;
          let header = {index: '序号', name: '地市', val: '次数'};
          let exportTable = _.cloneDeep(tabledata);
          exportTable.unshift(header);
          LAY_EXCEL.exportExcel(exportTable, 'AI应用统计(按地市).xlsx', 'xlsx')
        } else if (type == 'dl_1') {
        
           var tabledata = this.bar_dldstable;
          let header = {index: '序号', name: '地市', val: '次数'};
          let exportTable = _.cloneDeep(tabledata);
          exportTable.unshift(header);
          LAY_EXCEL.exportExcel(exportTable, '登录统计(按地市).xlsx', 'xlsx')
        } else if (type == 'dp_2') {
           var tabledata = this.pie_dpfltable;
          let header = {index: '序号', name: '分类', val: '次数', rate: '占比(%)'};
          let exportTable = _.cloneDeep(tabledata);
          exportTable.unshift(header);
          LAY_EXCEL.exportExcel(exportTable, '大屏统计(按分类).xlsx', 'xlsx');
        }  else if (type == 'ai_2') {
           var tabledata = this.pie_aifltable;
          let header = {index: '序号', name: '分类', val: '次数', rate: '占比(%)'};
          let exportTable = _.cloneDeep(tabledata);
          exportTable.unshift(header);
          LAY_EXCEL.exportExcel(exportTable, 'AI应用统计(按分类).xlsx', 'xlsx');
        } else if  (type ==  'dp_3'){
          // 大屏统计（按地市）
          var tabledata = this.pm_dptable;
          let header = {index: '序号', name: '页面', val: '次数'};
          let exportTable = _.cloneDeep(tabledata);
          exportTable.unshift(header);
          LAY_EXCEL.exportExcel(exportTable, '大屏统计TOP.xlsx', 'xlsx')
        } else if  (type ==  'ai_3'){
          // 大屏统计（按地市）
          var tabledata = this.pm_aitable;
          let header = {index: '序号', name: '应用', val: '次数'};
          let exportTable = _.cloneDeep(tabledata);
          exportTable.unshift(header);
          LAY_EXCEL.exportExcel(exportTable, 'AI应用统计TOP.xlsx', 'xlsx')
        }
      },
      // 不受时间查询
      initQueryNoDate () {
        this.selectLoginLogSumNoTime() //登录总次数
        this.selectDpDjLogNoTime() // 大屏点击总次数
        this.selectDpYyDjLogNoTime() //大屏应用点击总次数
        this.selectLogTime() //大屏/应用/系统登录的趋势
      },
       initQueryData () {
          this.selectLoginLogSum() //分地市统计系统的登录次数
          this.selectDpDjLogSum() // 分地市统计大屏的点击次数
          this.selectDpYyDjLogSum()  // 分地市统计大屏应用的点击次数

          this.selectDpFlDjLogSum() // 分“云、网、端、业、服、安、网络洞察”统计各类大屏的点击次数（饼图）
          this.selectDpYyFlDjLogSum() //分“三个面向”统计各类应用的点击次数（饼图）

          this.selectDpTopoDjLogTime() //大屏的TOPN（以每张大屏的颗粒度进行统计）
          this.selectDpYyTopoDjLogTime() //应用的TOPN（以每个应用的颗粒度进行统计）
      },
     // 初始化本月日期
      initDate () {
            var now = new Date(); //当前日期 
            var nowDayOfWeek = now.getDay(); //今天本周的第几天 
            var nowDay = now.getDate(); //当前日 
            var nowMonth = now.getMonth(); //当前月 
            var nowYear = now.getYear(); //当前年 
            nowYear += (nowYear < 2000) ? 1900 : 0; //
            var monstartDate =  this.formatDate(new Date(nowYear, nowMonth, 1)); 
            var monendDate =  this.formatDate(new Date()); 
            this.startDate = monstartDate;
            this.endDate = monendDate;
            this.groupDate = 'currmonth'
      },
      groupChange (val) {
        if (val) {
            this.initQueryData()
        }
      },
      querySubmit () {
        this.initQueryData()
      },
      startDateChange (val) {
        this.groupDate = '';
      },
      endDateChange (val) {
        this.groupDate = '';
      },
     
      selectLoginLogSum () {
          var qparams = {
            "startTime": this.startDate,
            "endTime": this.endDate,
            levelAreaCode: this.cityCode
          };
            if (!this.startDate) {
                this.$message.error('请选择起始日期！')
                return
            }
            if (!this.endDate) {
                this.$message.error('请选择终止日期！')
                return
            };
         serviceApi.selectLoginLogSum(qparams).then(res => {
          if (res.rspCode == '0000') {
            var datal =  res.result.data || [];
            datal.forEach(item => {
                item.logsum = Number(item.loginSum) || 0;
               
            });
             var cityDatas = datal;
            cityDatas = _.orderBy(cityDatas, function (item) {
                return Number(item.loginSum) || 0;
            }, 'desc');
           
            this.bar_dltotal = cityDatas.reduce(function(prev, cur, index, arr){
              return  prev +  cur.loginSum
            }, 0);

            this.bar_dldstable = cityDatas.map((item, index) =>　{
              return {index: index +1, name: item.AREA_NAME, val: item.logsum}
            });
            this.bar_dldstable.push({index: '',  name: '合计', val: this.bar_dltotal});
            this.bar_dldstable.push( {index: '统计时间:', name: qparams.startTime, val: qparams.endTime })


             var params = {
                id: 'bar3d3',
                zoomVal: 100,
                xAxis: cityDatas.map(item => {
                    return item.AREA_NAME
                }),
                value: cityDatas.map(item => {
                    return item.loginSum
                }),
            };
            new echartInit.initChart_bar3d(params)
                
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },
      selectDpDjLogSum () {
          var qparams = {
            "startTime": this.startDate,
            "endTime": this.endDate,
            levelAreaCode: this.cityCode
          };
            if (!this.startDate) {
                this.$message.error('请选择起始日期！')
                return
            }
            if (!this.endDate) {
                this.$message.error('请选择终止日期！')
                return
            };
         serviceApi.selectDpDjLogSum(qparams).then(res => {
             
          if (res.rspCode == '0000') {
            var datal =  res.result.data || [];
            datal.forEach(item => {
                item.logsum = Number(item.logsum) || 0;
               
            });
             var cityDatas = datal;
            cityDatas = _.orderBy(cityDatas, function (item) {
                return Number(item.logsum) || 0;
            }, 'desc');
           
            this.bar_dptotal = cityDatas.reduce(function(prev, cur, index, arr){
              return  prev +  cur.logsum
            }, 0);
            this.bar_dpdstable = cityDatas.map((item, index) =>　{
              return {index: index +1, name: item.AREA_NAME, val: item.logsum}
            });
            this.bar_dpdstable.push({index: '',  name: '合计', val: this.bar_dptotal});
            this.bar_dpdstable.push( {index: '统计时间:', name: qparams.startTime, val: qparams.endTime })
             var params = {
                id: 'bar3d1',
                zoomVal: 100,
                xAxis: cityDatas.map(item => {
                    return item.AREA_NAME
                }),
                value: cityDatas.map(item => {
                    return item.logsum
                }),
            };
            new echartInit.initChart_bar3d(params)
                
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },
      selectDpYyDjLogSum () {
          var qparams = {
            "startTime": this.startDate,
            "endTime": this.endDate,
            levelAreaCode: this.cityCode
          };
            if (!this.startDate) {
                this.$message.error('请选择起始日期！')
                return
            }
            if (!this.endDate) {
                this.$message.error('请选择终止日期！')
                return
            };
         serviceApi.selectDpYyDjLogSum(qparams).then(res => {
             
          if (res.rspCode == '0000') {
            var datal =  res.result.data || [];
             var datal =  res.result.data || [];
             datal.forEach(item => {
                item.logsum = Number(item.logsum) || 0;
               
            })
            var cityDatas = datal;
            cityDatas = _.orderBy(cityDatas, function (item) {
                return Number(item.logsum) || 0;
            }, 'desc');
             this.bar_aitotal = cityDatas.reduce(function(prev, cur, index, arr){
              return  prev +  cur.logsum
            }, 0);

           
            
             var params = {
                id: 'bar3d2',
                zoomVal: 100,
                xAxis: cityDatas.map(item => {
                    return item.AREA_NAME
                }),
                value: cityDatas.map(item => {
                    return item.logsum
                }),
            };
            new echartInit.initChart_bar3d(params);

            this.bar_aidstable = cityDatas.map((item, index) =>　{
              return {index: index +1, name: item.AREA_NAME, val: item.logsum}
            });
            this.bar_aidstable.push({index: '',  name: '合计', val: this.bar_aitotal});
            this.bar_aidstable.push( {index: '统计时间:', name: qparams.startTime, val: qparams.endTime });
                
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },

      selectDpFlDjLogSum  () {
          var qparams = {
            "startTime": this.startDate,
            "endTime": this.endDate,
            levelAreaCode: this.cityCode
          };
            if (!this.startDate) {
                this.$message.error('请选择起始日期！')
                return
            }
            if (!this.endDate) {
                this.$message.error('请选择终止日期！')
                return
            };
         serviceApi.selectDpFlDjLogSum(qparams).then(res => {
          if (res.rspCode == '0000') {
            var datal =  res.result.data || [];
            var total = 0;
            datal.forEach(element => {
                total += (Number(element.logsum) || 0)
   
            });

            var chartparams2 = {
                domId: 'dp_chartpie',
                total: total,
                data: datal.map(item => {
                    return {
                        name: item.TITLE,
                        value: item.logsum || 0
                    };
                })  
            }
            new echartInit.initpieca(chartparams2);

            this.pie_dpfltable = datal.map((item, index) =>　{
              return {index: index +1, name: item.TITLE, val: item.logsum,  rate: ((item.logsum/ total) * 100).toFixed(2) + '%'}
            });

            this.pie_dpfltable.push({index: '',  name: '合计', val: total, rate: '100%'});
            this.pie_dpfltable.push( {index: '统计时间:', name: qparams.startTime, val: qparams.endTime, rate: '' })
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },
      selectDpYyFlDjLogSum () {
          var qparams = {
            "startTime": this.startDate,
            "endTime": this.endDate,
            levelAreaCode: this.cityCode
          };
            if (!this.startDate) {
                this.$message.error('请选择起始日期！')
                return
            }
            if (!this.endDate) {
                this.$message.error('请选择终止日期！')
                return
            };
         serviceApi.selectDpYyFlDjLogSum(qparams).then(res => {
          if (res.rspCode == '0000') {
            var datal =  res.result.data || [];
            var total = 0;
            datal.forEach(element => {
                total += (Number(element.logsum) || 0)
   
            });

            var chartparams2 = {
                domId: 'ai_chartpie',
                total: total,
                data: datal.map(item => {
                    return {
                        name: item.TITLE,
                        value: item.logsum || 0
                    };
                })  
            }
            new echartInit.initpieca(chartparams2)  

            this.pie_aifltable = datal.map((item, index) =>　{
              return {index: index +1, name: item.TITLE, val: item.logsum,  rate: ((item.logsum/ total) * 100).toFixed(2) + '%'}
            });

            this.pie_aifltable.push({index: '',  name: '合计', val: total, rate: '100%'});
            this.pie_aifltable.push( {index: '统计时间:', name: qparams.startTime, val: qparams.endTime, rate: '' })
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },

      selectDpTopoDjLogTime () {
          var qparams = {
            "startTime": this.startDate,
            "endTime": this.endDate,
            levelAreaCode: this.cityCode
          };
            if (!this.startDate) {
                this.$message.error('请选择起始日期！')
                return
            }
            if (!this.endDate) {
                this.$message.error('请选择终止日期！')
                return
            };
         serviceApi.selectDpTopoDjLogTime(qparams).then(res => {
          if (res.rspCode == '0000') {
            var datal =  res.result.data || [];
            datal = _.orderBy(datal, function (item) {
                return Number(item.logsum) || 0;
            }, 'desc');
            var total = 0;
            datal.forEach(element => {
                total += (Number(element.logsum) || 0)
   
            });
            //统计
            var chartdata1 = {
                domId: 'dp_pmchart',
                uni: '',
                data: datal.map(item => {
                    return  {name: item.TITLE, val:  Number(item.logsum) || 0}
                }) 
            };
            new echartInit.initEchart_pm(chartdata1);

            this.pm_dptable = datal.map((item, index) =>　{
              return {index: index +1, name: item.TITLE, val: item.logsum}
            });
            this.pm_dptable.push({index: '',  name: '合计', val: total});
            this.pm_dptable.push( {index: '统计时间:', name: qparams.startTime, val: qparams.endTime });



                
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },
      selectDpYyTopoDjLogTime  () {
          var qparams = {
            "startTime": this.startDate,
            "endTime": this.endDate,
            levelAreaCode: this.cityCode
          };
            if (!this.startDate) {
                this.$message.error('请选择起始日期！')
                return
            }
            if (!this.endDate) {
                this.$message.error('请选择终止日期！')
                return
            };
         serviceApi.selectDpYyTopoDjLogTime(qparams).then(res => {
          if (res.rspCode == '0000') {
            var datal =  res.result.data || [];
            datal = _.orderBy(datal, function (item) {
                return Number(item.logsum) || 0;
            }, 'desc');
             var total = 0;
            datal.forEach(element => {
                total += (Number(element.logsum) || 0)
   
            });
            //统计
            var chartdata1 = {
                domId: 'ai_pmchart',
                uni: '',
                data: datal.map(item => {
                    return  {name: item.TITLE, val:  Number(item.logsum) || 0}
                }) 
            };
            new echartInit.initEchart_pm(chartdata1)
            this.pm_aitable = datal.map((item, index) =>　{
              return {index: index +1, name: item.TITLE, val: item.logsum}
            });
            this.pm_aitable.push({index: '',  name: '合计', val: total});
            this.pm_aitable.push( {index: '统计时间:', name: qparams.startTime, val: qparams.endTime });
                
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },

      selectLoginLogSumNoTime () {
         let qparams = {
           levelAreaCode: this.cityCode
         }
          serviceApi.selectLoginLogSumNoTime(qparams).then(res => {
          if (res.rspCode == '0000') {
              
            var datal =  res.result.data[0] || {};
            this.login_total = datal.loginSum
                
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },
      selectDpDjLogNoTime () {
          serviceApi.selectDpDjLogNoTime({levelAreaCode: this.cityCode}).then(res => {
          if (res.rspCode == '0000') {
              
            var datal =  res.result.data[0] || {};
            this.dpclick_total  = datal.loginSum
                
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },
      selectDpYyDjLogNoTime () {
          serviceApi.selectDpYyDjLogNoTime({levelAreaCode: this.cityCode}).then(res => {
          if (res.rspCode == '0000') {
              
            var datal =  res.result.data[0] || {};
            this.ai_total = datal.loginSum
                
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },
      selectLogTime () {
          serviceApi.selectLogTime({levelAreaCode: this.cityCode}).then(res => {
          if (res.rspCode == '0000') {
           
            var datal =  res.result.data || {};
             function qxData (key) {
               return datal[key].map(item => {
                return item.sum || 0
              })
            };   
            
             let chartparams = {
                domId: 'login_line',
                yname: "",
                xAxis: datal.dpyy.map(item => {
                  return item.month
                }),

                datas: [
                    {
                        name: '大屏点击量',
                        data:  qxData('dp'),
                        type: 'line',
                    },
                    {
                        name: 'AI-应用点击量',
                        data:  qxData('dpyy'),
                        type: 'line',
                    },
                    {
                        name: '登录次数',
                        data:  qxData('login'),
                        type: 'line',
                    },
                   
                ]
            }
             new echartInit.initEchart_mline(chartparams)
           
                
          } else {
            this.$message.error(res.rspMsg)
          }
        })
      },
      getXday(day){
         function doHandleMonth(month){
            var m = month;
            if(month.toString().length == 1){
                 m = "0" + month;
            }
            return m;
        };
        var today = new Date();
        var targetday_milliseconds=today.getTime() + 1000*60*60*24*day;
        today.setTime(targetday_milliseconds); //注意，这行是关键代码
        var tYear = today.getFullYear();
        var tMonth = today.getMonth();
        var tDate = today.getDate();
        tMonth = doHandleMonth(tMonth + 1);
        tDate = doHandleMonth(tDate);
        return tYear+"-"+tMonth+"-"+tDate;
     },
      formatDate(date) { 
        var myyear = date.getFullYear(); 
        var mymonth = date.getMonth()+1; 
        var myweekday = date.getDate(); 
        if(mymonth < 10){ 
           mymonth = "0" + mymonth; 
        } 
        if(myweekday < 10){ 
           myweekday = "0" + myweekday; 
        } 
        return (myyear+"-"+mymonth + "-" + myweekday); 
      }, 
 
    
      initEchart() {
        var lineparams = {
            id: 'login_line'
        }
         new echartInit.initEchart_line(lineparams)
        
    }
  }
}

</script>
<style lang='scss' scoped>
.searchbox {
    width: 100%;
    margin-top: 10px;
    padding: 2px 20px;
    background: #0f2b5e;
    .formitem {
        display: inline-block;
        margin-right: 20px;
    }
    label {
        font-size: 16px;
        line-height: 40px;
        font-weight: normal;
    }

}
/deep/.searchbox .el-input__inner {
  background:rgba(1,3,42,0.6);
  color: #fff !important;
}
/deep/.searchbox .el-radio-button--small .el-radio-button__inner {
    padding: 0px 20px;
    font-size: 15px;
    height: 30px;
    line-height: 30px;
    background: rgba(1,3,42,0.6);
    color: #ddd !important;
}

/deep/.searchbox .el-radio-button__orig-radio:checked + .el-radio-button__inner {
    color: #6ed0ee;
    background-color: #1890ff;
    border-color: #f4f5f7;
    -webkit-box-shadow: -1px 0 0 0 #1890ff;
    box-shadow: -1px 0 0 0 #1890ff;
}
/deep/.searchbox .el-button--small.is-round {
    padding: 7px 15px;
    font-size: 16px;
    min-width: 80px;
}

.loginfoboxwarp {
    display: flex;
    flex: 1;
    flex-direction: column;
    min-height: 960px;

}
.loginfobox {
    display: flex;
    overflow-y: auto;
    .logrow {
        flex: 1;
        display: flex;
        .loginfitem {
            border: 1px solid rgb(19, 116, 133);
            margin: 10px;
            border-radius: 6px;
            box-shadow: 0 0 5px rgb(17, 65, 100);
            display: flex;
            flex-direction: column;
        }

    }
}
.colitem {
    text-align: center;
    padding-top: 20px;
    .numif {
        font-size: 26px;
        font-family: 'DigifaceWide';
        color: rgb(99, 240, 106);
        line-height: 80px;
    }
    .imgif {
        img {
            width: 68px;
        }
    }
    .fontif {
       font-size: 20px; 
      line-height: 60px;
    }
}
.logitem-title {
   font-size: 18px;
   font-weight: bold;
   color: aqua;
   line-height: 36px;
   border-bottom: 1px solid rgb(43, 89, 110);
   padding: 0 15px;
   border-left: 4px solid rgb(25, 199, 199);
   margin-left: -2px;
   background: linear-gradient(left,rgb(27, 49, 109),rgb(1, 16, 53));
}
.totalbox {
    line-height: 30px;
    font-size: 18px;
    color: aqua;
    padding-left: 15px;
    text-align: left;
    padding-right: 15px;
    position: relative;
    top: 5px;
}
.exportbtn  {
  font-weight: normal;
  font-size: 16px;
}
/deep/.exportbtn .el-button--mini.is-round {
  padding: 5px 10px !important;
}
.cityinfo  {
  font-size: 18px;
  line-height: 34px;
  color: aqua;
}
/deep/ .el-date-editor.el-input, .el-date-editor.el-input__inner {
    width: 140px;
}
</style>