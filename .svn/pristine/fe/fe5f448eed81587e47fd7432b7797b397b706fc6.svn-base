import echarts from 'echarts'
export default {
    initChart_bar3d(data) {
        var echart = echarts.init(document.getElementById(data.id))
        const CubeLeft = echarts.graphic.extendShape({
            shape: {
                x: 0,
                y: 0
            },
            buildPath: function(ctx, shape) {
                const xAxisPoint = shape.xAxisPoint
                const c0 = [shape.x - 10, shape.y]
                const c1 = [shape.x + 10, shape.y]
                const c2 = [xAxisPoint[0] + 10, xAxisPoint[1]]
                const c3 = [xAxisPoint[0] - 10, xAxisPoint[1]]
                ctx.moveTo(c0[0], c0[1]).lineTo(c1[0], c1[1]).lineTo(c2[0], c2[1]).lineTo(c3[0], c3[1]).closePath()
                ctx.stroke();
            }
        })

        const CubeRight = echarts.graphic.extendShape({
            shape: {
                x: 0,
                y: 0
            },
            buildPath: function(ctx, shape) {
                const xAxisPoint = shape.xAxisPoint
                const c1 = [shape.x + 9, shape.y]
                const c2 = [xAxisPoint[0] + 9, xAxisPoint[1]]
                const c3 = [xAxisPoint[0] + 14, xAxisPoint[1] - 9]
                const c4 = [shape.x + 14, shape.y - 9]
                ctx.moveTo(c1[0], c1[1]).lineTo(c2[0], c2[1]).lineTo(c3[0], c3[1]).lineTo(c4[0], c4[1]).closePath();
                ctx.stroke();
            }
        })

        const CubeTop = echarts.graphic.extendShape({
            shape: {
                x: 0,
                y: 0
            },
            buildPath: function(ctx, shape) {
                const c1 = [shape.x - 10, shape.y]
                const c2 = [shape.x + 10, shape.y]
                const c3 = [shape.x + 15, shape.y - 9]
                const c4 = [shape.x - 5, shape.y - 9]
                ctx.moveTo(c1[0], c1[1]).lineTo(c2[0], c2[1]).lineTo(c3[0], c3[1]).lineTo(c4[0], c4[1]).closePath()
                ctx.stroke();
            }
        })
        echarts.graphic.registerShape('CubeLeft', CubeLeft)
        echarts.graphic.registerShape('CubeRight', CubeRight)
        echarts.graphic.registerShape('CubeTop', CubeTop)
        const xAxis = data.xAxis
        const value = data.value
        var option = {
            title: false,
            color: ['#02b3c9', '#FF8279'],
            tooltip: {
                trigger: 'item',
                axisPointer: {
                    type: 'shadow',
                },
            },

            grid: {
                top: '30',
                left: '15',
                right: '15',
                bottom: '15',
                containLabel: true
            },
            xAxis: {
                type: 'category',
                data: xAxis,
                axisLine: {
                    show: true,
                    color: '#A582EA'
                },

                axisLabel: {
                    color: '#fff',
                    fontSize: 13,
                    interval: 0,
                    rotate: data.rotate || 40
                },
                splitLine: {
                    show: false
                },
            },
            yAxis: [{
                type: 'value',
                splitLine: {
                    show: true,
                    lineStyle: {
                        color: '#00A0E9',
                        opacity: 0.2
                    }
                },
                axisLine: {
                    show: true,
                },
                axisLabel: {
                    show: true,
                    color: '#fff',
                    fontSize: 12
                },
                axisTick: {
                    show: true,
                },
            }],
            series: [{
                    type: 'custom',
                    label: {
                        normal: {
                            show: true,
                            fontSize: 14,
                            color: '#fff',
                            position: 'top',
                        }
                    },
                    renderItem: (params, api) => {
                        const location = api.coord([api.value(0), api.value(1)])
                        return {
                            type: 'group',
                            children: [{
                                type: 'CubeLeft',
                                shape: {
                                    api,
                                    xValue: api.value(0),
                                    yValue: api.value(1),
                                    x: location[0],
                                    y: location[1],
                                    xAxisPoint: api.coord([api.value(0), 0])
                                },
                                style: {
                                    fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                                            offset: 0,
                                            color: 'rgba(0, 246, 255, 1)'
                                        },
                                        {
                                            offset: 0.6,
                                            color: 'rgba(7, 185, 244, 0.6)'
                                        },
                                        {
                                            offset: 1,
                                            color: 'rgba(0, 246, 255, 0)'
                                        }
                                    ])
                                }
                            }, {
                                type: 'CubeRight',
                                shape: {
                                    api,
                                    xValue: api.value(0),
                                    yValue: api.value(1),
                                    x: location[0],
                                    y: location[1],
                                    xAxisPoint: api.coord([api.value(0), 0])
                                },
                                style: {
                                    fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                                            offset: 0,
                                            color: 'rgba(0, 246, 255, 1)'
                                        },
                                        {
                                            offset: 0.6,
                                            color: 'rgba(7, 185, 244, 0.6)'
                                        },
                                        {
                                            offset: 1,
                                            color: 'rgba(0, 246, 255, 0)'
                                        }
                                    ])
                                }
                            }, {
                                type: 'CubeTop',
                                shape: {
                                    api,
                                    xValue: api.value(0),
                                    yValue: api.value(1),
                                    x: location[0],
                                    y: location[1],
                                    xAxisPoint: api.coord([api.value(0), 0])
                                },
                                style: {
                                    fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                                            offset: 0,
                                            color: '#0591c1'
                                        },
                                        {
                                            offset: 1,
                                            color: '#02b3c9'
                                        }
                                    ])
                                }
                            }]
                        }
                    },
                    data: value
                },
                {
                    type: 'bar',
                    label: {
                        normal: {
                            show: true,
                            position: 'top',
                            fontSize: 12,
                            color: '#fff',
                            offset: [2, -5]
                        }
                    },
                    itemStyle: {
                        color: 'transparent'
                    },
                    tooltip: {

                    },
                    data: value
                }
            ]
        }
        if (data.value.length > 12) {
            option.dataZoom = [{
                show: true,
                start: 0,
                end: data.zoomVal || 60,
                bottom: 16,
                textStyle: {
                    color: "rgba(204,187,225,0)",
                },
                fillerColor: "rgba(67,55,160,0.3)",
                borderColor: "rgba(204,187,225,0.1)"
            }]
        };
        echart.setOption(option)
    },
    initpieca(pdata) {
        var total = pdata.total
        var unit = pdata.unit || ''
        var echart = echarts.init(document.getElementById(pdata.domId))

        var rich = {
            aqua: {
                color: "aqua",
                fontSize: 14,
                padding: [8, 0],
                align: 'center'
            },
            white: {
                color: "#fff",
                align: 'center',
                fontSize: 14,
                padding: [2, 0]
            },

            hr: {
                borderColor: '#a2c7f3',
                width: '100%',
                borderWidth: 1,
                height: 0,
            }
        }
        var pieData = pdata.data;
        var data = [];
        var color = pdata.colors || ['#1694c4', '#06d3c4', '#ffbc32', '#2ccc44', '#ff55ac', '#0e908a', '#a373e2', '#c37310', ]
        for (var i = 0; i < pieData.length; i++) {
            data.push({
                value: pieData[i].value,
                name: pieData[i].name,
                itemStyle: {
                    normal: {
                        borderWidth: 5,
                        shadowBlur: 2,
                        borderColor: color[i],
                        shadowColor: color[i]
                    }
                }
            });
        }
        var seriesOption = [{
            name: '',
            type: 'pie',
            clockWise: false,
            center: ['42%', '50%'],
            radius: ['55%', '70%'],
            hoverAnimation: false,
            itemStyle: {
                normal: {
                    label: {
                        show: true,
                        position: 'outside',
                        color: '#ddd',
                        formatter: function(params, ticket, callback) {
                            var percent = 0;
                            percent = ((params.value / total) * 100).toFixed(2);
                            return '{white|' + params.name + '}\n{hr|}\n{aqua|' + params.value + ' / ' + percent + '%}';
                        },
                        rich: rich,

                    },

                    labelLine: {
                        length: 8,
                        length2: 15,
                    }
                }
            },
            data: data
        }];
        var option = {
            color: color,
            tooltip: {
                trigger: 'item',
                formatter: "{b}:\n{c}" + unit + "({d}%)",
                textStyle: {
                    fontSize: 16,
                },
            },
            title: {
                text: '{a|' + total + unit + '}\n{c|合计}',
                x: '38%',
                y: '36%',
                align: 'center',
                textStyle: {
                    rich: {
                        a: {
                            fontSize: 16,
                            color: '#29EEF3',
                            padding: [15, 0],
                            align: 'center',
                            fontWeight: '800'
                        },

                        c: {
                            fontSize: 16,
                            align: 'center',
                            color: '#fff',
                        }
                    }
                }
            },

            legend: {
                icon: "circle",
                orient: 'vertical',
                show: pdata.hidlegend ? false : true,
                top: 'center',
                right: 10,
                data: pieData.filter(item => {
                    return item.name
                }),
                textStyle: {
                    color: "#fff",
                    fontSize: 14
                },
            },
            series: seriesOption
        }
        echart.setOption(option, true);
    },
    initpieca2(pdata) {
        var total = pdata.total
        var unit = pdata.unit || ''
        var echart = echarts.init(document.getElementById(pdata.domId))

        var rich = {
            aqua: {
                color: "aqua",
                fontSize: 14,
                padding: [8, 0],
                align: 'center'
            },
            white: {
                color: "#fff",
                align: 'center',
                fontSize: 14,
                padding: [2, 0]
            },

            hr: {
                borderColor: '#a2c7f3',
                width: '100%',
                borderWidth: 1,
                height: 0,
            }
        }
        var pieData = pdata.data;
        var data = [];
        var color = pdata.colors || ['#1694c4', '#06d3c4', '#ffbc32', '#2ccc44', '#ff55ac', '#0e908a', '#a373e2', '#c37310', ]
        for (var i = 0; i < pieData.length; i++) {
            data.push({
                value: pieData[i].value,
                name: pieData[i].name,
                itemStyle: {
                    normal: {
                        borderWidth: 5,
                        shadowBlur: 2,
                        borderColor: color[i],
                        shadowColor: color[i]
                    }
                }
            });
        }
        var seriesOption = [{
            name: '',
            type: 'pie',
            clockWise: false,
            startAngle: 180,
            center: ['42%', '50%'],
            radius: ['48%', '60%'],
            hoverAnimation: false,
            itemStyle: {
                normal: {
                    label: {
                        show: true,
                        position: 'outside',
                        color: '#ddd',
                        formatter: function(params, ticket, callback) {
                            var percent = 0;
                            percent = ((params.value / total) * 100).toFixed(2);
                            return '{white|' + params.name + '}\n{hr|}\n{aqua|' + params.value + '}';
                        },
                        rich: rich,

                    },

                    labelLine: {
                        length: 8,
                        length2: 15,
                    }
                }
            },
            data: data
        }];
        var option = {
            color: color,
            tooltip: {
                trigger: 'item',
                formatter: "{b}:\n{c}" + unit + "({d}%)",
                textStyle: {
                    fontSize: 16,
                },
            },
            title: {
                text: '{a|' + total + unit + '}\n{c|合计}',
                x: '37%',
                y: '38%',
                align: 'center',
                textStyle: {
                    rich: {
                        a: {
                            fontSize: 16,
                            color: '#29EEF3',
                            padding: [10, 0],
                            align: 'center',
                            fontWeight: '800'
                        },

                        c: {
                            fontSize: 15,
                            align: 'center',
                            color: '#fff',
                        }
                    }
                }
            },

            legend: {
                icon: "circle",
                orient: 'vertical',
                show: pdata.hidlegend ? false : true,
                top: 'center',
                right: 10,
                data: pieData.filter(item => {
                    return item.name
                }),
                textStyle: {
                    color: "#fff",
                    fontSize: 14
                },
            },
            series: seriesOption
        }
        echart.setOption(option, true);
    },
    initEchart_pm(params, callbk) {
        var echart = echarts.init(document.getElementById(params.domId))

        var attackSourcesColor = [
            new echarts.graphic.LinearGradient(0, 1, 1, 1, [
                { offset: 0, color: "#EB3B5A" },
                { offset: 1, color: "#FE9C5A" }
            ]),
            new echarts.graphic.LinearGradient(0, 1, 1, 1, [
                { offset: 0, color: "#FA8231" },
                { offset: 1, color: "#FFD14C" }
            ]),
            new echarts.graphic.LinearGradient(0, 1, 1, 1, [
                { offset: 0, color: "#F7B731" },
                { offset: 1, color: "#FFEE96" }
            ]),
            new echarts.graphic.LinearGradient(0, 1, 1, 1, [
                { offset: 0, color: "#395CFE" },
                { offset: 1, color: "#2EC7CF" }
            ])
        ];
        var attackSourcesColor1 = [
            "#EB3B5A",
            "#FA8231",
            "#F7B731",
            "#3860FC",
            "#1089E7",
            "#F57474",
            "#56D0E3",
            "#1089E7",
            "#F57474",
            "#1089E7",
            "#F57474",
            "#F57474"
        ];
        var attaData = [];
        var attaName = [];
        params.data.forEach((it, index) => {
            attaData[index] = it.val;
            attaName[index] = it.name;
        });
        var salvProMax = []; //背景按最大值
        for (let i = 0; i < attaData.length; i++) {
            salvProMax.push(attaData[0]);
        }

        function attackSourcesDataFmt(sData) {
            var arr = [];
            sData.forEach(function(item, i) {
                let itemStyle = {
                    color: i > 3 ? attackSourcesColor[3] : attackSourcesColor[i]
                };
                arr.push({
                    value: item,
                    itemStyle: itemStyle
                });
            });
            return arr;
        }

        var option = {
            tooltip: {
                show: true,
                textStyle: {
                    fontSize: 14
                }
            },
            color: ["#F7B731"],
            grid: {
                left: "5%",
                right: "5%",
                width: "80%",
                bottom: "10",
                top: "10",
                containLabel: true
            },

            xAxis: {
                type: "value",
                splitLine: {
                    show: false
                },
                axisLabel: {
                    show: false,
                },
                axisTick: {
                    show: false
                },
                axisLine: {
                    show: false
                }
            },
            yAxis: [{
                type: "category",
                triggerEvent: true,
                inverse: true,
                axisTick: "none",
                axisLine: "none",
                show: true,
                interval: 0,
                axisLabel: {
                    textStyle: {
                        color: "#fff",
                        fontSize: "14"
                    }
                },
                data: attackSourcesDataFmt(attaName)
            }, ],
            series: [{
                    zlevel: 1,
                    type: "bar",
                    barWidth: 14,
                    data: attackSourcesDataFmt(attaData),

                    itemStyle: {
                        normal: {
                            barBorderRadius: 10
                        }
                    },
                    label: {
                        show: true,
                        fontSize: 14,
                        color: "#fff",
                        position: "right",
                        textBorderWidth: 1,
                        padding: [2, 0, 0, 0],
                        formatter: '{c} ' + (params.uni || '')
                    }
                },

                {
                    type: "bar",
                    barWidth: 15,
                    barGap: "-100%",
                    margin: "20",
                    data: salvProMax,
                    tooltip: {
                        show: false
                    },
                    textStyle: {
                        fontSize: 12,
                        color: "#fff"
                    },
                    itemStyle: {
                        normal: {
                            color: "#05325F",
                            fontSize: 10,
                            barBorderRadius: 30
                        },
                    }
                }
            ]
        };
        if (params.data.length > 8) {
            option.dataZoom = [{
                type: 'slider',
                show: true,
                yAxisIndex: [0],
                right: 0,
                start: 0, //数据窗口范围的起始百分比
                end: params.zoomVal || parseInt((8 / params.data.length) * 100),
                right: 10,
                width: 15,
                fillerColor: "rgba(67,55,160,0.4)",
                borderColor: "rgba(204,187,225,0.5)"
            }]


        }
        echart.setOption(option, true);

        echart.on("click", function(param) {
            if (param.componentType == "yAxis") {
                callbk && callbk(param)
            }
        })
    },
    initEchart_line(params) {
        var echart = echarts.init(document.getElementById(params.id))
        var option = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow',
                },
            },
            grid: {
                top: '15%',
                left: '10',
                right: '10',
                bottom: '15',
                containLabel: true
            },
            xAxis: [{
                type: 'category',
                axisLine: {
                    show: true
                },
                axisLabel: {
                    color: '#ddd',
                    fontSize: 14,
                },
                splitLine: {
                    // show: true
                },

                axisTick: {
                    show: false
                },
                boundaryGap: true,
                data: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],

            }],

            yAxis: [{
                type: 'value',
                min: 0,
                splitNumber: 4,
                splitLine: {
                    show: true,

                },
                axisLine: {
                    show: true,
                },
                axisLabel: {
                    show: true,
                    textStyle: {
                        color: '#ddd',

                    },
                },
                axisTick: {
                    show: false,
                },
                splitLine: {
                    lineStyle: {
                        color: 'rgba(131,101,101,0.2)',
                        type: 'dashed',
                    }
                }
            }],
            series: [{
                name: '',
                type: 'line',
                // smooth: true, //是否平滑
                showAllSymbol: true,
                symbol: 'circle',
                symbolSize: 6,
                lineStyle: {
                    normal: {
                        color: "#48B3FF"
                    },
                },
                label: {
                    show: true,
                    position: 'top',
                    textStyle: {
                        fontSize: 13,
                        color: '#fff',
                    }
                },

                itemStyle: {
                    color: "#48B3FF",
                    borderColor: "#48B3FF",
                    borderWidth: 1,

                },
                tooltip: {
                    show: true
                },
                areaStyle: {
                    normal: {
                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                                offset: 0,
                                color: 'rgb(111,183,241, 0.6)'
                            },
                            {
                                offset: 1,
                                color: 'rgb(111,183,241, 0.1)'
                            }
                        ], false),
                        shadowColor: 'rgb(111,183,241, 0.3)',
                        shadowBlur: 10
                    }
                },
                data: [55, 35, 62, 55, 97, 64, 44, 66, 78, 82, 33, 77],
            }]
        };
        echart.setOption(option, true);
    },
    initEchart_mline(pdata) {
        var echart = echarts.init(document.getElementById(pdata.domId))
        var option = {
            color: ['#91cc75', '#fac858', '#ee6666', '#73c0de', '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc'],
            tooltip: {
                trigger: 'axis',
                axisPointer: { // 坐标轴指示器，坐标轴触发有效
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            legend: {
                top: 10,
                textStyle: {
                    color: '#fff',
                    fontSize: 14,
                },
                orient: 'horizontal',
                icon: 'circle',

                data: pdata.datas.map(item => {
                    return item.name;
                })
            },
            grid: {
                top: '40',
                left: '5%',
                right: '5%',
                bottom: '10',
                containLabel: true
            },
            xAxis: {
                type: 'category',
                axisLine: {
                    lineStyle: {
                        color: '#9cb2f3',
                    }
                },
                axisLabel: {
                    show: true,
                    textStyle: {
                        color: '#fff',
                        fontSize: 13
                    },
                },
                data: pdata.xAxis,
            },
            yAxis: {
                name: pdata.yname || '',
                splitNumber: 4,
                axisLabel: {
                    show: true,
                    textStyle: {
                        color: '#fff'
                    },
                },
                axisLine: {
                    lineStyle: {
                        color: '#9cb2f3',
                    }
                },
                splitLine: { //分割线配置
                    lineStyle: {
                        color: "#AAAAAA56",
                    }
                },
            },
            series: pdata.datas
        };
        echart.setOption(option, true);
    },
}